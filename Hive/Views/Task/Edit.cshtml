@model TaskCreateVM

@{
    ViewBag.Title = "Create";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-9">
        <h2>Tasks</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Details", "Project", new { id = Model.Task.ProjectID })">Project</a>
            </li>
            <li class="active">
                Edit Task
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">

    @using (Html.BeginForm("Edit", "Task", null, FormMethod.Post, new { enctype = "multipart/form-data" , id = "form" }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.Task.ID)
        @Html.HiddenFor(model => model.Task.Status)
        @Html.HiddenFor(model => model.Task.DateAssigned)
        @Html.HiddenFor(model => model.Task.ProjectID)

        <div class="row">
            <div class="col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Task</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)

                            <div class="form-group">

                                @Html.LabelFor(model => model.Task.Assignees, new { @class = "col-sm-2 control-label" })

                                <div class="col-sm-10">
                                    @Html.ListBoxFor(model => model.SelectedAssignees, SelectListVM.GetProjectAssignees(Model.Task.ProjectID),
                        new { @class = "chosen-select", @tabindex = "4", @style = "width:100%;", @data_placeholder = "Select Assignees..." })
                                    @Html.ValidationMessageFor(model => model.SelectedAssignees, "", new { @class = "text-danger" })

                                </div>
                            </div>

                            <div class="form-group">

                                @Html.LabelFor(model => model.Task.Title, new { @class = "col-sm-2 control-label" })

                                <div class="col-sm-10">
                                    @Html.EditorFor(model => model.Task.Title)
                                    @Html.ValidationMessageFor(model => model.Task.Title, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Task.Description, new { @class = "col-sm-2 control-label" })
                                <div class="col-sm-10">
                                    @Html.TextAreaFor(model => model.Task.Description, new { @class= "form-control" })
                                    @Html.ValidationMessageFor(model => model.Task.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Task.Priority, new { @class = "col-sm-2 control-label" })
                                <div class="col-sm-10">
                                    @Html.EnumDropDownListFor(model => model.Task.Priority, new { @class = "form-control", placeholder = "Priority" })
                                    @Html.ValidationMessageFor(model => model.Task.Priority, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Task.Deadline, new { @class = "col-sm-2 control-label" })
                                <div class="col-sm-10">
                          
                                    @Html.TextBoxFor(model => model.Task.Deadline, new { @class = "date form-control" })
                                    @Html.ValidationMessageFor(model => model.Task.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" class="btn btn-primary" value="Save" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@section Styles {
    @Styles.Render("~/Content/plugins/colorpicker/colorpickerStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
}

@section Scripts{
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/colorpicker")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/chosen")

    <script type="text/javascript">
        $(document).ready(function () {

            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }

            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }

            $('.date').datetimepicker({
                format: 'DD/MM/YYYY hh:mm A',
            });

            $.validator.methods.date = function (value, element) {
                return true;
            };

            $("#form").validate({
                rules: {
                    "SelectedAssignees": {
                        required: true,
                    },
                }
            });
        });
    </script>
}
