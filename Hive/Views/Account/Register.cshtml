@model RegisterVM

@{
    ViewBag.Title = "Register";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>HIVE | Register </title>

    <link href="~/Content/bootstrap.min.css" rel="stylesheet">
    <link href="~/Fonts/font-awesome/css/font-awesome.css" rel="stylesheet">

    <link href="~/Content/animate.css" rel="stylesheet">
    <link href="~/Content/style.css" rel="stylesheet">

</head>

<body class="gray-bg" style="background-color: #ffefca">

    <div class="middle-box text-center loginscreen   animated fadeInDown">
        <div>
            <div>
                <h1 class="logo-name">Hive</h1>
            </div>
            <h3>Welcome to HIVE</h3>
            <p>
                Hive is an online project management application that enables users to manage and track projects, deadlines, schedules, and other workflow processes
            </p>
            <p>Sign Up. To see it in action.</p>
            <div class="ibox-content">

                @using (Html.BeginForm("Register", "Account", new { returnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { enctype = "multipart/form-data", @class = "m-t", role = "form",  }))
                {

                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.User.FirstName, new { @class = "col-lg-4 control-label" })*@
                        @Html.TextBoxFor(m => m.User.FirstName, new { @class = "form-control", placeholder = "First Name" })
                        @Html.ValidationMessageFor(m => m.User.FirstName, "", new { @class = "text-danger" })

                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.User.LastName, new { @class = "col-lg-4 control-label" })*@
                        @Html.TextBoxFor(m => m.User.LastName, new { @class = "form-control", placeholder = "Last Name" })
                        @Html.ValidationMessageFor(m => m.User.LastName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.Username, new { @class = "col-lg-4 control-label" })*@
                        @Html.TextBoxFor(model => model.Username, new { @class = "form-control", placeholder = "Username" })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.Email, new { @class = "col-lg-4 control-label" })*@
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.Password, new { @class = "col-lg-4 control-label" })*@
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-lg-4 control-label" })*@
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.Phone, new { @class = "col-sm-3 control-label" })*@
                        @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", placeholder = "Phone" })
                        @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.User.Gender, new { @class = "col-sm-3 control-label" })*@
                        @Html.EnumDropDownListFor(m => m.User.Gender, new { @class = "form-control", placeholder = "Gender" })
                        @Html.ValidationMessageFor(m => m.User.Gender, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(model => model.User.Bio, new { @class = "col-sm-3" })*@
                        @Html.TextAreaFor(m => m.User.Bio, new { @class = "form-control", placeholder = "Bio" })
                        @Html.ValidationMessageFor(m => m.User.Bio, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group">
                        <label title="Upload image file" for="inputImage" class="btn btn-warning">
                            <input type="file" accept="image/*" name="file" id="inputImage">
                            Upload Profile Picture
                        </label>
                    </div>

                    <br />
                    <button type="submit" class="btn btn-primary block full-width m-b">Register</button>
                }
            </div>

            <p class="m-t"> <small>Hive &copy; 2016</small> </p>
        </div>
    </div>

</body>

</html>



@section Styles {
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/dataPicker")

    <script type="text/javascript">
        var config = {
            '.chosen-select': {},
            '.chosen-select-deselect': { allow_single_deselect: true },
            '.chosen-select-no-single': { disable_search_threshold: 10 },
            '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
            '.chosen-select-width': { width: "95%" }
        }

        for (var selector in config) {
            $(selector).chosen(config[selector]);
        }
    </script>
}